/***********************************************************************************************\
 * (C) KAL ATM Software GmbH, 2025
 * KAL ATM Software GmbH licenses this file to you under the MIT license.
 * See the LICENSE file in the project root for more information.
 *
 * This file was created automatically as part of the XFS4IoT CashDispenser interface.
 * Denominate_g.cs uses automatically generated parts.
\***********************************************************************************************/

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using XFS4IoT.Completions;

namespace XFS4IoT.CashDispenser.Completions
{
    [DataContract]
    [XFS4Version(Version = "3.0")]
    [Completion(Name = "CashDispenser.Denominate")]
    public sealed class DenominateCompletion : Completion<DenominateCompletion.PayloadData>
    {
        public DenominateCompletion(int RequestId, DenominateCompletion.PayloadData Payload, MessageHeader.CompletionCodeEnum CompletionCode, string ErrorDescription)
            : base(RequestId, Payload, CompletionCode, ErrorDescription)
        { }

        [DataContract]
        public sealed class PayloadData : MessagePayload
        {

            public PayloadData(ErrorCodeEnum? ErrorCode = null, DenominationClass Result = null)
                : base()
            {
                this.ErrorCode = ErrorCode;
                this.Result = Result;
            }

            public enum ErrorCodeEnum
            {
                InvalidCurrency,
                InvalidTellerID,
                CashUnitError,
                InvalidDenomination,
                InvalidMixNumber,
                NoCurrencyMix,
                NotDispensable,
                TooManyItems,
                ExchangeActive,
                NoCashBoxPresent,
                AmountNotInMixTable
            }

            /// <summary>
            /// Specifies the error code if applicable, otherwise null. Following values are possible:
            /// 
            /// * ```invalidCurrency``` - There are no storage units in the device of the currency specified in the request.
            /// * ```invalidTellerID``` - Invalid teller ID. This error will never be generated by a Self-Service device.
            /// * ```cashUnitError``` - There is a problem with a storage unit. A
            ///   [Storage.StorageErrorEvent](#storage.storageerrorevent) will be posted with the details.
            /// * ```invalidDenomination``` - No *mix* is specified and the sum of the values for *counts* and
            ///   *cashBox* does not match the non-zero *currencies* specified.
            /// * ```invalidMixNumber``` - Unknown mix algorithm.
            /// * ```noCurrencyMix``` - The storage units specified in the request were not all the same currency
            ///   and this device does not support multiple currencies.
            /// * ```notDispensable``` - The amount is not dispensable by the device. This error code is also returned
            ///   if a unit is specified in the *counts* list which is not a dispensing storage unit, e.g., a
            ///   retract/reject storage unit.
            /// * ```tooManyItems``` - The request requires too many items to be dispensed.
            /// * ```exchangeActive``` - The device is in an exchange state (see
            ///   [Storage.StartExchange](#storage.startexchange)).
            /// * ```noCashBoxPresent``` - Cash box amount needed, but teller is not assigned a cash box.
            /// * ```amountNotInMixTable``` - A mix table is being used to determine the denomination but the amount
            ///   specified in the request is not in the mix table.
            /// </summary>
            [DataMember(Name = "errorCode")]
            public ErrorCodeEnum? ErrorCode { get; init; }

            /// <summary>
            /// Specifies the denomination if successful. May be null where a denomination could not be determined.
            /// </summary>
            [DataMember(Name = "result")]
            public DenominationClass Result { get; init; }

        }
    }
}
