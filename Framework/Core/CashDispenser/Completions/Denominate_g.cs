/***********************************************************************************************\
 * (C) KAL ATM Software GmbH, 2021
 * KAL ATM Software GmbH licenses this file to you under the MIT license.
 * See the LICENSE file in the project root for more information.
 *
 * This file was created automatically as part of the XFS4IoT CashDispenser interface.
 * Denominate_g.cs uses automatically generated parts.
\***********************************************************************************************/

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using XFS4IoT.Completions;

namespace XFS4IoT.CashDispenser.Completions
{
    [DataContract]
    [Completion(Name = "CashDispenser.Denominate")]
    public sealed class DenominateCompletion : Completion<DenominateCompletion.PayloadData>
    {
        public DenominateCompletion(int RequestId, DenominateCompletion.PayloadData Payload)
            : base(RequestId, Payload)
        { }

        [DataContract]
        public sealed class PayloadData : MessagePayload
        {

            public PayloadData(CompletionCodeEnum CompletionCode, string ErrorDescription, ErrorCodeEnum? ErrorCode = null, Dictionary<string, double> Currencies = null, Dictionary<string, int> Values = null, Dictionary<string, double> CashBox = null)
                : base(CompletionCode, ErrorDescription)
            {
                this.ErrorCode = ErrorCode;
                this.Currencies = Currencies;
                this.Values = Values;
                this.CashBox = CashBox;
            }

            public enum ErrorCodeEnum
            {
                InvalidCurrency,
                InvalidTellerID,
                CashUnitError,
                InvalidDenomination,
                InvalidMixNumber,
                NoCurrencyMix,
                NotDispensable,
                TooManyItems,
                ExchangeActive,
                NoCashBoxPresent,
                AmountNotInMixTable
            }

            /// <summary>
            /// Specifies the error code if applicable. Following values are possible:
            /// 
            /// * ```invalidCurrency``` - There are no storage units in the device of the currency specified in the request.
            /// * ```invalidTellerID``` - Invalid teller ID. This error will never be generated by a Self-Service device.
            /// * ```cashUnitError``` - There is a problem with a storage unit. A 
            /// [Storage.StorageErrorEvent](#storage.storageerrorevent) will be posted with the details.
            /// * ```invalidDenomination``` - No _mix_ is specified and the sum of the values for _counts_ and 
            /// _cashBox_ does not match the non-zero _currencies_ specified.
            /// * ```invalidMixNumber``` - Unknown mix algorithm.
            /// * ```noCurrencyMix``` - The storage units specified in the request were not all of the same currency 
            /// and this device does not support multiple currencies.
            /// * ```notDispensable``` - The amount is not dispensable by the device. This error code is also returned
            /// if a unit is specified in the _counts_ list which is not a dispensing cash unit, e.g., a
            /// retract/reject cash unit.
            /// * ```tooManyItems``` - The request requires too many items to be dispensed.
            /// * ```exchangeActive``` - The device is in an exchange state (see 
            /// [CashManagement.StartExchange](#cashmanagement.startexchange)).
            /// * ```noCashBoxPresent``` - Cash box amount needed, however teller is not assigned a cash box.
            /// * ```amountNotInMixTable``` - A mix table is being used to determine the denomination but the amount 
            /// specified in the request is not in the mix table.
            /// </summary>
            [DataMember(Name = "errorCode")]
            public ErrorCodeEnum? ErrorCode { get; init; }

            /// <summary>
            /// List of currency and amount combinations for denomination requests or output. There will be one entry for 
            /// each currency in the denomination. The property name is the ISO 4217 currency identifier. This list can be 
            /// omitted on a request if _values_ specifies the entire request.
            /// </summary>
            [DataMember(Name = "currencies")]
            public Dictionary<string, double> Currencies { get; init; }

            /// <summary>
            /// This list specifies the number of items to take from the cash units. If specified in a request, the output 
            /// denomination must include these items.
            /// 
            /// The property name is storage unit object name as stated by the [Storage.GetStorage](#storage.getstorage)
            /// command. The value of the entry is the number of items to take from that unit.
            /// </summary>
            [DataMember(Name = "values")]
            public Dictionary<string, int> Values { get; init; }

            /// <summary>
            /// Only applies to Teller Dispensers. Amount to be paid from the tellerâ€™s cash box.
            /// </summary>
            [DataMember(Name = "cashBox")]
            public Dictionary<string, double> CashBox { get; init; }

        }
    }
}
